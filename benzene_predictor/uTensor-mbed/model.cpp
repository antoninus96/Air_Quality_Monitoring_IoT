// Auto generated by utensor-cli

#include "uTensor/core/context.hpp"
#include "model_weight.hpp"
#include "uTensor/core/tensor.hpp"
#include "uTensor/ops/MatrixOps.hpp"
#include "uTensor/ops/MathOps.hpp"
#include "model.hpp"
#include "uTensor/ops/ArrayOps.hpp"


void get_predictor_ctx(Context& ctx, Tensor* input_0) {

{ // add tensor for placeholders
    ctx.add(input_0, "X:0", 2);
}
{    
    ctx.add(new BinaryTensor<int>({1}, inline_MatMul_eightbit_X__port__0_reshape_dims_0), 
            "MatMul_eightbit/X__port__0/reshape_dims:0", 
            1);
}
{
    ctx.add(new RamTensor<float>(), "MatMul_eightbit/X__port__0/reshape:0", 2);
    ctx.push(new ReshapeOp(), 
             { "X:0", "MatMul_eightbit/X__port__0/reshape_dims:0" },
             { "MatMul_eightbit/X__port__0/reshape:0" });
    ctx.eval();
}
{    
    ctx.add(new BinaryTensor<int>({1}, inline_MatMul_eightbit_X__port__0_reduction_dims_0), 
            "MatMul_eightbit/X__port__0/reduction_dims:0", 
            2);
}
{   
    RamTensor<float>* out_tensor;
    out_tensor = new RamTensor<float>({ 1 });
    ctx.add(out_tensor, "MatMul_eightbit/X__port__0/min:0", 1);
    ctx.push(new MinOp(), 
             { "MatMul_eightbit/X__port__0/reshape:0", "MatMul_eightbit/X__port__0/reduction_dims:0" },
             { "MatMul_eightbit/X__port__0/min:0" });
    ctx.eval();
}
{   
    RamTensor<float>* out_tensor;
    out_tensor = new RamTensor<float>({ 1 });
    ctx.add(out_tensor, "MatMul_eightbit/X__port__0/max:0", 1);
    ctx.push(new MaxOp(), 
             { "MatMul_eightbit/X__port__0/reshape:0", "MatMul_eightbit/X__port__0/reduction_dims:0" },
             { "MatMul_eightbit/X__port__0/max:0" });
    ctx.eval();
}
{
    ctx.add(new RamTensor<uint8_t>(), "MatMul_eightbit/X__port__0/quantize:0", 1);
    ctx.add(new RamTensor<float>({1}), "MatMul_eightbit/X__port__0/quantize:1", 1);
    ctx.add(new RamTensor<float>({1}), "MatMul_eightbit/X__port__0/quantize:2", 1);
    ctx.push(new QuantizeV2Op(),
             {  "X:0",  "MatMul_eightbit/X__port__0/min:0", "MatMul_eightbit/X__port__0/max:0" },
             {  "MatMul_eightbit/X__port__0/quantize:0",  "MatMul_eightbit/X__port__0/quantize:1", "MatMul_eightbit/X__port__0/quantize:2" });
    ctx.eval();
}
{    
    ctx.add(new BinaryTensor<float>({3,1}, inline_W_0), 
            "W:0", 
            2);
}
{    
    ctx.add(new BinaryTensor<int>({1}, inline_MatMul_eightbit_W__port__0_reshape_dims_0), 
            "MatMul_eightbit/W__port__0/reshape_dims:0", 
            1);
}
{
    ctx.add(new RamTensor<float>(), "MatMul_eightbit/W__port__0/reshape:0", 2);
    ctx.push(new ReshapeOp(), 
             { "W:0", "MatMul_eightbit/W__port__0/reshape_dims:0" },
             { "MatMul_eightbit/W__port__0/reshape:0" });
    ctx.eval();
}
{    
    ctx.add(new BinaryTensor<int>({1}, inline_MatMul_eightbit_W__port__0_reduction_dims_0), 
            "MatMul_eightbit/W__port__0/reduction_dims:0", 
            2);
}
{   
    RamTensor<float>* out_tensor;
    out_tensor = new RamTensor<float>({ 1 });
    ctx.add(out_tensor, "MatMul_eightbit/W__port__0/min:0", 1);
    ctx.push(new MinOp(), 
             { "MatMul_eightbit/W__port__0/reshape:0", "MatMul_eightbit/W__port__0/reduction_dims:0" },
             { "MatMul_eightbit/W__port__0/min:0" });
    ctx.eval();
}
{   
    RamTensor<float>* out_tensor;
    out_tensor = new RamTensor<float>({ 1 });
    ctx.add(out_tensor, "MatMul_eightbit/W__port__0/max:0", 1);
    ctx.push(new MaxOp(), 
             { "MatMul_eightbit/W__port__0/reshape:0", "MatMul_eightbit/W__port__0/reduction_dims:0" },
             { "MatMul_eightbit/W__port__0/max:0" });
    ctx.eval();
}
{
    ctx.add(new RamTensor<uint8_t>(), "MatMul_eightbit/W__port__0/quantize:0", 1);
    ctx.add(new RamTensor<float>({1}), "MatMul_eightbit/W__port__0/quantize:1", 1);
    ctx.add(new RamTensor<float>({1}), "MatMul_eightbit/W__port__0/quantize:2", 1);
    ctx.push(new QuantizeV2Op(),
             {  "W:0",  "MatMul_eightbit/W__port__0/min:0", "MatMul_eightbit/W__port__0/max:0" },
             {  "MatMul_eightbit/W__port__0/quantize:0",  "MatMul_eightbit/W__port__0/quantize:1", "MatMul_eightbit/W__port__0/quantize:2" });
    ctx.eval();
}
{
    ctx.add(new RamTensor<int>(), "MatMul/eightbit:0", 2);
    ctx.add(new RamTensor<float>({1}), "MatMul/eightbit:1", 2);
    ctx.add(new RamTensor<float>({1}), "MatMul/eightbit:2", 2);
    ctx.push(new QntMatMulOp<uint8_t, uint8_t, int>(), 
             { "MatMul_eightbit/X__port__0/quantize:0", "MatMul_eightbit/X__port__0/quantize:1", "MatMul_eightbit/X__port__0/quantize:2", "MatMul_eightbit/W__port__0/quantize:0", "MatMul_eightbit/W__port__0/quantize:1",  "MatMul_eightbit/W__port__0/quantize:2" },
             { "MatMul/eightbit:0", "MatMul/eightbit:1",  "MatMul/eightbit:2" });
    ctx.eval();
}
{
    ctx.add(new RamTensor<float>({1}), "MatMul/eightbit/requant_range:0", 1);
    ctx.add(new RamTensor<float>({1}), "MatMul/eightbit/requant_range:1", 1);
    ctx.push(new Requantization_RangeOp(),
             { "MatMul/eightbit:0", "MatMul/eightbit:1", "MatMul/eightbit:2" },
             { "MatMul/eightbit/requant_range:0", "MatMul/eightbit/requant_range:1" });
    ctx.eval();
}
{   
    ctx.add(new RamTensor<uint8_t>(), "MatMul/eightbit/requantize:0", 1);
    ctx.add(new RamTensor<float>({1}), "MatMul/eightbit/requantize:1", 1);
    ctx.add(new RamTensor<float>({1}), "MatMul/eightbit/requantize:2", 1);
    ctx.push(new RequantizeOp(),
             { "MatMul/eightbit:0", "MatMul/eightbit:1", "MatMul/eightbit:2", "MatMul/eightbit/requant_range:0", "MatMul/eightbit/requant_range:1" },
             { "MatMul/eightbit/requantize:0", "MatMul/eightbit/requantize:1", "MatMul/eightbit/requantize:2" });
    ctx.eval();
}
{    
    ctx.add(new BinaryTensor<float>({}, inline_b_0), 
            "b:0", 
            2);
}
{    
    ctx.add(new BinaryTensor<int>({1}, inline_y_pred_eightbit_b__port__0_reshape_dims_0), 
            "y_pred_eightbit/b__port__0/reshape_dims:0", 
            1);
}
{
    ctx.add(new RamTensor<float>(), "y_pred_eightbit/b__port__0/reshape:0", 2);
    ctx.push(new ReshapeOp(), 
             { "b:0", "y_pred_eightbit/b__port__0/reshape_dims:0" },
             { "y_pred_eightbit/b__port__0/reshape:0" });
    ctx.eval();
}
{    
    ctx.add(new BinaryTensor<int>({1}, inline_y_pred_eightbit_b__port__0_reduction_dims_0), 
            "y_pred_eightbit/b__port__0/reduction_dims:0", 
            2);
}
{   
    RamTensor<float>* out_tensor;
    out_tensor = new RamTensor<float>({ 1 });
    ctx.add(out_tensor, "y_pred_eightbit/b__port__0/min:0", 1);
    ctx.push(new MinOp(), 
             { "y_pred_eightbit/b__port__0/reshape:0", "y_pred_eightbit/b__port__0/reduction_dims:0" },
             { "y_pred_eightbit/b__port__0/min:0" });
    ctx.eval();
}
{   
    RamTensor<float>* out_tensor;
    out_tensor = new RamTensor<float>({ 1 });
    ctx.add(out_tensor, "y_pred_eightbit/b__port__0/max:0", 1);
    ctx.push(new MaxOp(), 
             { "y_pred_eightbit/b__port__0/reshape:0", "y_pred_eightbit/b__port__0/reduction_dims:0" },
             { "y_pred_eightbit/b__port__0/max:0" });
    ctx.eval();
}
{
    ctx.add(new RamTensor<uint8_t>(), "y_pred_eightbit/b__port__0/quantize:0", 1);
    ctx.add(new RamTensor<float>({1}), "y_pred_eightbit/b__port__0/quantize:1", 1);
    ctx.add(new RamTensor<float>({1}), "y_pred_eightbit/b__port__0/quantize:2", 1);
    ctx.push(new QuantizeV2Op(),
             {  "b:0",  "y_pred_eightbit/b__port__0/min:0", "y_pred_eightbit/b__port__0/max:0" },
             {  "y_pred_eightbit/b__port__0/quantize:0",  "y_pred_eightbit/b__port__0/quantize:1", "y_pred_eightbit/b__port__0/quantize:2" });
    ctx.eval();
}
{
    ctx.add(new RamTensor<int>(), "y_pred/eightbit:0", 2);
    ctx.add(new RamTensor<float>({1}), "y_pred/eightbit:1", 2);
    ctx.add(new RamTensor<float>({1}), "y_pred/eightbit:2", 2);
    ctx.push(new QuantizedAddOp<uint8_t, uint8_t, int>(), 
             { "MatMul/eightbit/requantize:0", "MatMul/eightbit/requantize:1", "MatMul/eightbit/requantize:2", "y_pred_eightbit/b__port__0/quantize:0", "y_pred_eightbit/b__port__0/quantize:1",  "y_pred_eightbit/b__port__0/quantize:2" },
             { "y_pred/eightbit:0", "y_pred/eightbit:1",  "y_pred/eightbit:2" });
    ctx.eval();
}
{
    ctx.add(new RamTensor<float>({1}), "y_pred/eightbit/requant_range:0", 1);
    ctx.add(new RamTensor<float>({1}), "y_pred/eightbit/requant_range:1", 1);
    ctx.push(new Requantization_RangeOp(),
             { "y_pred/eightbit:0", "y_pred/eightbit:1", "y_pred/eightbit:2" },
             { "y_pred/eightbit/requant_range:0", "y_pred/eightbit/requant_range:1" });
    ctx.eval();
}
{   
    ctx.add(new RamTensor<uint8_t>(), "y_pred/eightbit/requantize:0", 1);
    ctx.add(new RamTensor<float>({1}), "y_pred/eightbit/requantize:1", 1);
    ctx.add(new RamTensor<float>({1}), "y_pred/eightbit/requantize:2", 1);
    ctx.push(new RequantizeOp(),
             { "y_pred/eightbit:0", "y_pred/eightbit:1", "y_pred/eightbit:2", "y_pred/eightbit/requant_range:0", "y_pred/eightbit/requant_range:1" },
             { "y_pred/eightbit/requantize:0", "y_pred/eightbit/requantize:1", "y_pred/eightbit/requantize:2" });
    ctx.eval();
}
{
    ctx.add(new RamTensor<float>(), "y_pred:0");
    ctx.push(new DequantizeOp(), 
             { "y_pred/eightbit/requantize:0", "y_pred/eightbit/requantize:1", "y_pred/eightbit/requantize:2" },
             { "y_pred:0" });
}
}
